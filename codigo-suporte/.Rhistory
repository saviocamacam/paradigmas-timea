library(plyr)
library(ggplot2)
library(scales)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF[r,] <- newrow
existingDF
}
setwd("C:/Users/savio/Google Drive/estudo/PD360_paradigmas_programacao_paralela/exercicios/04_10_scheduling/pd36o-aula-011-pratica-for-scheduling-cod/src/codigo-suporte");
data = read.csv("C:/Users/savio/Google Drive/estudo/PD360_paradigmas_programacao_paralela/exercicios/04_10_scheduling/pd36o-aula-011-pratica-for-scheduling-cod/src/codigo-suporte/final.csv");
View(data)
cdata <- ddply(data, c("exp","version", "schedule" , "chunk_size" , "num_threads" ,  "size_of_data"), summarise,
N    = length(chunk_size),
mean_orig = mean(ORIG),
mean_omp = mean(OMP),
sd_orig = 2 * sd(ORIG),
sd_omp = 2 * sd(OMP),
se_orig = sd_orig / sqrt(N),
se_omp = sd_omp / sqrt(N),
mean_plot_value = 0.0,
se_plot_value = 0.0,
sd_plot_value = 0.0
)
View(cdata)
cdata <- subset(cdata, schedule == "DYNAMIC" & size_of_data ==8388608 & chunk_size== 16)
View(cdata)
schedule_config <- c("DYNAMIC", "GUIDED", "STATIC")
size_of_data_config <- c(1048576, 8388608)
chunk_size_configs <- c(16, 32, 64, 128, 256)
for (sch in schedule_config) {
for (sd in size_of_data_config) {
for (cs in chunk_size_configs) {
cdata <- subset(cdata1, schedule == sch & size_of_data == sd & chunk_size== cs)
cdata$mean_plot_value  <- ifelse(cdata$version == "OMP", cdata$mean_omp, ifelse(cdata$version == "OMP+OFF", cdata$mean_omp_off, cdata$mean_cuda))
cdata$sd_plot_value  <- ifelse(cdata$version == "OMP", cdata$sd_omp, ifelse(cdata$version == "OMP+OFF", cdata$sd_omp_off, cdata$sd_cuda))
cdata$se_plot_value  <- ifelse(cdata$version == "OMP", cdata$se_omp, ifelse(cdata$version == "OMP+OFF", cdata$se_omp_off, cdata$se_cuda))
df_data = data.frame(x=cdata$num_threads, y=cdata$chunk_size, z=cdata$mean_orig, z_se=cdata$se_orig, z_sd=cdata$sd_orig, t=cdata$mean_plot_value, t_se=cdata$se_plot_value, t_sd=cdata$sd_plot_value, cat=cdata$version)
df_data$x = as.factor(df_data$x)
df_data$y = as.factor(df_data$y)
p1 <- ggplot(df_data, aes(x=x, y=t, fill=cat)) +
geom_bar(stat="identity", position="dodge") +
geom_errorbar(aes(ymin=t-t_sd, ymax=t+t_sd),
size=.5,    # Thinner lines
width=.4,
position=position_dodge(.9)) +
xlab("Number of Threads") +
ylab("Time(ms)") +
ggtitle("Offloading Analysis for gemm (Number of Threads with chunk_size = 16)\n") +
scale_y_continuous() +
theme_bw() +
theme(legend.position=c(0.9,0.89), legend.title=element_blank(), plot.title = element_text(size=20))
(p1 = p1 + scale_fill_grey(start = 0.9, end = 0.2))
multiplot(p1, cols=1)
graph_file_name <- paste0("plots/graph-omp-benchmark-vecadd-schedule-", sch,"-size_of_data-",sd,"-chunk_size-",cs,".png")
png(filename=graph_file_name)
plot(p1)
dev.off()
}
}
}
library(plyr)
library(ggplot2)
library(scales)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF[r,] <- newrow
existingDF
}
setwd("C:/Users/savio/Google Drive/estudo/PD360_paradigmas_programacao_paralela/exercicios/04_10_scheduling/pd36o-aula-011-pratica-for-scheduling-cod/src/codigo-suporte");
data = read.csv("C:/Users/savio/Google Drive/estudo/PD360_paradigmas_programacao_paralela/exercicios/04_10_scheduling/pd36o-aula-011-pratica-for-scheduling-cod/src/codigo-suporte/final.csv");
View(data)
cdata1 <- ddply(data, c("exp","version", "schedule" , "chunk_size" , "num_threads" ,  "size_of_data"), summarise,
N    = length(chunk_size),
mean_orig = mean(ORIG),
mean_omp = mean(OMP),
sd_orig = 2 * sd(ORIG),
sd_omp = 2 * sd(OMP),
se_orig = sd_orig / sqrt(N),
se_omp = sd_omp / sqrt(N),
mean_plot_value = 0.0,
se_plot_value = 0.0,
sd_plot_value = 0.0
)
View(cdata1)
schedule_config <- c("DYNAMIC", "GUIDED", "STATIC")
size_of_data_config <- c(1048576, 8388608)
chunk_size_configs <- c(16, 32, 64, 128, 256)
for (sch in schedule_config) {
for (sd in size_of_data_config) {
for (cs in chunk_size_configs) {
cdata <- subset(cdata1, schedule == sch & size_of_data == sd & chunk_size== cs)
cdata$mean_plot_value  <- ifelse(cdata$version == "OMP", cdata$mean_omp, ifelse(cdata$version == "OMP+OFF", cdata$mean_omp_off, cdata$mean_cuda))
cdata$sd_plot_value  <- ifelse(cdata$version == "OMP", cdata$sd_omp, ifelse(cdata$version == "OMP+OFF", cdata$sd_omp_off, cdata$sd_cuda))
cdata$se_plot_value  <- ifelse(cdata$version == "OMP", cdata$se_omp, ifelse(cdata$version == "OMP+OFF", cdata$se_omp_off, cdata$se_cuda))
df_data = data.frame(x=cdata$num_threads, y=cdata$chunk_size, z=cdata$mean_orig, z_se=cdata$se_orig, z_sd=cdata$sd_orig, t=cdata$mean_plot_value, t_se=cdata$se_plot_value, t_sd=cdata$sd_plot_value, cat=cdata$version)
df_data$x = as.factor(df_data$x)
df_data$y = as.factor(df_data$y)
p1 <- ggplot(df_data, aes(x=x, y=t, fill=cat)) +
geom_bar(stat="identity", position="dodge") +
geom_errorbar(aes(ymin=t-t_sd, ymax=t+t_sd),
size=.5,    # Thinner lines
width=.4,
position=position_dodge(.9)) +
xlab("Number of Threads") +
ylab("Time(ms)") +
ggtitle("Offloading Analysis for gemm (Number of Threads with chunk_size = 16)\n") +
scale_y_continuous() +
theme_bw() +
theme(legend.position=c(0.9,0.89), legend.title=element_blank(), plot.title = element_text(size=20))
(p1 = p1 + scale_fill_grey(start = 0.9, end = 0.2))
multiplot(p1, cols=1)
graph_file_name <- paste0("plots/graph-omp-benchmark-vecadd-schedule-", sch,"-size_of_data-",sd,"-chunk_size-",cs,".png")
png(filename=graph_file_name)
plot(p1)
dev.off()
}
}
}
library(plyr)
library(ggplot2)
library(scales)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF[r,] <- newrow
existingDF
}
setwd("C:/Users/savio/Google Drive/estudo/PD360_paradigmas_programacao_paralela/exercicios/04_10_scheduling/pd36o-aula-011-pratica-for-scheduling-cod/src/codigo-suporte");
data = read.csv("C:/Users/savio/Google Drive/estudo/PD360_paradigmas_programacao_paralela/exercicios/04_10_scheduling/pd36o-aula-011-pratica-for-scheduling-cod/src/codigo-suporte/final.csv");
View(data)
cdata1 <- ddply(data, c("exp","version", "schedule" , "chunk_size" , "num_threads" ,  "size_of_data"), summarise,
N    = length(chunk_size),
mean_orig = mean(ORIG),
mean_omp = mean(OMP),
sd_orig = 2 * sd(ORIG),
sd_omp = 2 * sd(OMP),
se_orig = sd_orig / sqrt(N),
se_omp = sd_omp / sqrt(N),
mean_plot_value = 0.0,
se_plot_value = 0.0,
sd_plot_value = 0.0
)
View(cdata1)
schedule_config <- c("DYNAMIC", "GUIDED", "STATIC")
size_of_data_config <- c(1048576, 8388608)
chunk_size_configs <- c(16, 32, 64, 128, 256)
for (sch in schedule_config) {
for (sd in size_of_data_config) {
for (cs in chunk_size_configs) {
cdata <- subset(cdata1, schedule == sch & size_of_data == sd & chunk_size== cs)
cdata$mean_plot_value  <- ifelse(cdata$version == "OMP", cdata$mean_omp, ifelse(cdata$version == "OMP+OFF", cdata$mean_omp_off, cdata$mean_cuda))
cdata$sd_plot_value  <- ifelse(cdata$version == "OMP", cdata$sd_omp, ifelse(cdata$version == "OMP+OFF", cdata$sd_omp_off, cdata$sd_cuda))
cdata$se_plot_value  <- ifelse(cdata$version == "OMP", cdata$se_omp, ifelse(cdata$version == "OMP+OFF", cdata$se_omp_off, cdata$se_cuda))
df_data = data.frame(x=cdata$num_threads, y=cdata$chunk_size, z=cdata$mean_orig, z_se=cdata$se_orig, z_sd=cdata$sd_orig, t=cdata$mean_plot_value, t_se=cdata$se_plot_value, t_sd=cdata$sd_plot_value, cat=cdata$version)
df_data$x = as.factor(df_data$x)
df_data$y = as.factor(df_data$y)
p1 <- ggplot(df_data, aes(x=x, y=t, fill=cat)) +
geom_bar(stat="identity", position="dodge") +
geom_errorbar(aes(ymin=t-t_sd, ymax=t+t_sd),
size=.5,    # Thinner lines
width=.4,
position=position_dodge(.9)) +
xlab("Number of Threads") +
ylab("Time(ms)") +
ggtitle("Offloading Analysis for gemm (Number of Threads with chunk_size = 16)\n") +
scale_y_continuous() +
theme_bw() +
theme(legend.position=c(0.9,0.89), legend.title=element_blank(), plot.title = element_text(size=20))
(p1 = p1 + scale_fill_grey(start = 0.9, end = 0.2))
multiplot(p1, cols=1)
graph_file_name <- paste0("plots/graph-omp-benchmark-vecadd-schedule-", sch,"-size_of_data-",sd,"-chunk_size-",cs,".png")
png(filename=graph_file_name)
plot(p1)
dev.off()
}
}
}
library(plyr)
library(ggplot2)
library(scales)
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
plots <- c(list(...), plotlist)
numPlots = length(plots)
if (is.null(layout)) {
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
for (i in 1:numPlots) {
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
insertRow <- function(existingDF, newrow, r) {
existingDF[seq(r+1,nrow(existingDF)+1),] <- existingDF[seq(r,nrow(existingDF)),]
existingDF[r,] <- newrow
existingDF
}
setwd("C:/Users/savio/Google Drive/estudo/PD360_paradigmas_programacao_paralela/exercicios/04_10_scheduling/pd36o-aula-011-pratica-for-scheduling-cod/src/codigo-suporte");
data = read.csv("C:/Users/savio/Google Drive/estudo/PD360_paradigmas_programacao_paralela/exercicios/04_10_scheduling/pd36o-aula-011-pratica-for-scheduling-cod/src/codigo-suporte/final.csv");
View(data)
cdata1 <- ddply(data, c("exp","version", "schedule" , "chunk_size" , "num_threads" ,  "size_of_data"), summarise,
N    = length(chunk_size),
mean_orig = mean(ORIG),
mean_omp = mean(OMP),
sd_orig = 2 * sd(ORIG),
sd_omp = 2 * sd(OMP),
se_orig = sd_orig / sqrt(N),
se_omp = sd_omp / sqrt(N),
mean_plot_value = 0.0,
se_plot_value = 0.0,
sd_plot_value = 0.0
)
View(cdata1)
schedule_config <- c("DYNAMIC", "GUIDED", "STATIC")
size_of_data_config <- c(1048576, 8388608)
chunk_size_configs <- c(16, 32, 64, 128, 256)
for (sch in schedule_config) {
for (sd in size_of_data_config) {
for (cs in chunk_size_configs) {
cdata <- subset(cdata1, schedule == sch & size_of_data == sd & chunk_size== cs)
cdata$mean_plot_value  <- ifelse(cdata$version == "OMP", cdata$mean_omp, ifelse(cdata$version == "OMP+OFF", cdata$mean_omp_off, cdata$mean_cuda))
cdata$sd_plot_value  <- ifelse(cdata$version == "OMP", cdata$sd_omp, ifelse(cdata$version == "OMP+OFF", cdata$sd_omp_off, cdata$sd_cuda))
cdata$se_plot_value  <- ifelse(cdata$version == "OMP", cdata$se_omp, ifelse(cdata$version == "OMP+OFF", cdata$se_omp_off, cdata$se_cuda))
df_data = data.frame(x=cdata$num_threads, y=cdata$chunk_size, z=cdata$mean_orig, z_se=cdata$se_orig, z_sd=cdata$sd_orig, t=cdata$mean_plot_value, t_se=cdata$se_plot_value, t_sd=cdata$sd_plot_value, cat=cdata$version)
df_data$x = as.factor(df_data$x)
df_data$y = as.factor(df_data$y)
p1 <- ggplot(df_data, aes(x=x, y=t, fill=cat)) +
geom_bar(stat="identity", position="dodge") +
geom_errorbar(aes(ymin=t-t_sd, ymax=t+t_sd),
size=.5,    # Thinner lines
width=.4,
position=position_dodge(.9)) +
xlab("Number of Threads") +
ylab("Time(ms)") +
ggtitle("Offloading Analysis for gemm (Number of Threads with chunk_size = 16)\n") +
scale_y_continuous() +
theme_bw() +
theme(legend.position=c(0.9,0.89), legend.title=element_blank(), plot.title = element_text(size=20))
(p1 = p1 + scale_fill_grey(start = 0.9, end = 0.2))
multiplot(p1, cols=1)
graph_file_name <- paste0("plots/graph-omp-benchmark-vecadd-schedule-", sch,"-size_of_data-",sd,"-chunk_size-",cs,".png")
png(filename=graph_file_name)
plot(p1)
dev.off()
}
}
}
